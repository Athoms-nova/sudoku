{"version":3,"sources":["elements/variable.js","elements/menu.js","elements/miniBloc.js","elements/grille.js","elements/sudoBoutton.js","elements/option.js","elements/fonction.js","elements/chiffrePosible.js","elements/cssFonction.js","elements/sudoku.js","elements/monJeu.js","App.js","serviceWorker.js","index.js"],"names":["colorCase","Menu","onClickJouer","onChangeNiveau","onChangeVision","id","onChange","value","onClick","MiniBloc","bloc","numBloc","cssBloc","onClickCelle","key","numLingne","numColonne","className","map","ligne","colonne","item","style","Grille","grille","indice","SudoBoutton","onClickNouvellePartie","onClickResoudre","onClickMenu","Option","onClickRecommencer","onClickRetour","onChangeRepere","type","name","TableauSudokuVide","valeur","sudoVide","nBloc","nligne","push","nColonne","copieTableauSudo","tab","numLigne","chiffreAleatoire","valMin","valMax","Math","floor","random","valideChiffre","chiffre","block","validation","indexOf","inBloc","chiffresPossible","tabChiffres","possible","i","length","tableauColonne","console","log","tableauLigne","sudokuChiffreAleatoir","nbChiffre","tableauSudoku","resolutionSolutionUnique","chemin","posibility","trouver","chiffreDispo","changement","gagner","verificationGagner","undefined","removeValue","newBloc","actuChemin","choix","infoBloc","tabTrie","j","trierParTaille","presTretement","outBoucle","resolutionTotal","flag","n","shift","pop","genereChiffreCacher","newGrille","cacher","ChiffrePosible","onClickClavierNum","styleBloc","numB","numL","numC","backgroundColor","border","fontWeight","color","copieObjet","Sudoku","props","visioLigne","colorLigneColonne","visioColonne","visioChiffre","colorChiffre","state","maGrille","resetVisio","modifCSS","onVisio","modeVisio","selectCaseColor","celle","caseActu","colorCorrection","solution","nouvellePartie","nbChiffreCacher","actuAction","action","splice","event","target","parseInt","vision","chiffrePossible","setState","win","colorRepere","clavierTouch","isNaN","modeRepere","checked","niveau","this","onChangeChiffre","couleurFond","gras","bordure","couleurText","document","addEventListener","React","Component","MonJeu","actuWindo","start","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1179a6c2.chunk.js","sourcesContent":["// Mode choisi\r\nconst easy = 40, normal = 50, hard = 60, veryHard = 65;\r\n\r\n// Chiffe aleatoire à generer\r\nconst randomChiffre = 20; \r\n\r\n// Couleur des différents modes\r\nconst colorCase = \"rgba(191, 238, 138, 0.741)\";\r\nconst colorVisio = \"rgba(236, 236, 236, 0.918)\";\r\nconst colorChiffreSelect = \"rgb(253, 255, 130)\";\r\n\r\n\r\nexport { easy, normal, hard, veryHard, colorCase, colorVisio, colorChiffreSelect, randomChiffre };","import React from 'react';\r\nimport { easy, normal, hard, veryHard } from './variable';\r\n\r\n\r\n\r\nconst Menu = ({onClickJouer, onChangeNiveau, onChangeVision}) => {\r\n    return(\r\n        <div id=\"Menu\">\r\n            <h1> Sudoku !!</h1>\r\n            <div id=\"selection\">\r\n                <div id=\"niveau\">\r\n                    <h2> Choisir le niveau de difficulté !! </h2>\r\n                    <select onChange={onChangeNiveau}>\r\n                        <option value={easy}> Easy </option>\r\n                        <option value={normal}> Normal </option>\r\n                        <option value={hard}> Hard </option>\r\n                        <option value={veryHard}> Very Hard </option>\r\n                    </select>\r\n                    <h2> Mode vision pour plus de facilité :) </h2>\r\n                    <select onChange={onChangeVision}>\r\n                        <option value=\"yes\"> Yes </option>\r\n                        <option value=\"no\"> No, I'm a Pro !!! </option>\r\n                    </select>\r\n                </div>\r\n                <div id=\"commencer\">\r\n                    <h2> La Partie commence ici !!! </h2>\r\n                    <button onClick={onClickJouer}> Jouer </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst MiniBloc = ({bloc, numBloc, cssBloc, onClickCelle}) => {\r\n    let key = 0;\r\n    let numLingne = 0, numColonne = 0;\r\n\r\n    return(\r\n        <div className=\"Bloc\">\r\n            {bloc.map(ligne => (\r\n                <ul key={numLingne++} colonne={numColonne=0}>\r\n                    {ligne.map(item => (\r\n                        <li key={key++} \r\n                            onClick = {onClickCelle} \r\n                            style={cssBloc[\"case\"+(numBloc-1)+\"\"+(numLingne-1)+\"\"+(numColonne)]}\r\n                            className={\"case\"+(numBloc-1)+\"\"+(numLingne-1)+\"\"+(numColonne++)} \r\n                        >\r\n                            {item}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default MiniBloc;","import React from 'react';\r\nimport MiniBloc from './miniBloc';\r\n\r\nconst Grille = ({grille, cssBloc, onClickCelle}) => {\r\n    let indice = 0;\r\n\r\n    return(\r\n        <div id=\"Grille\">\r\n            {grille.map(bloc => (\r\n                <MiniBloc \r\n                    key={indice++} bloc={bloc} numBloc={indice} \r\n                    cssBloc={cssBloc}\r\n                    onClickCelle={onClickCelle}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Grille;","import React from 'react';\r\n\r\n\r\nconst SudoBoutton = ({onClickNouvellePartie, onClickResoudre, onClickMenu}) => {\r\n    return(\r\n        <div id=\"Boutton\">\r\n            <button onClick={onClickNouvellePartie}> Nouvelle partie </button>\r\n            <button onClick={onClickResoudre}> Résoudre </button>\r\n            <button onClick={onClickMenu}> Menu </button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SudoBoutton;","import React from 'react';\r\n\r\n\r\nconst Option = ({onClickRecommencer, onClickRetour, onChangeRepere}) => {\r\n    return(\r\n        <div id=\"Option\">\r\n            {/* <div className=\"Time\">\r\n                <p style={{textDecoration: \"underline\" }}> Times </p>\r\n                <p> 00:00:00 </p>\r\n            </div> */}\r\n            <button onClick={onClickRecommencer} > Recommencer </button>\r\n            <button onClick={onClickRetour} > Retour </button>\r\n            <p> \r\n                <input type=\"checkbox\" name=\"Repere\" onChange={onChangeRepere} />\r\n                Repère \r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Option;","/*\r\nfunction afficheDeuxGrille( grille1, grille2 ){\r\n    let i = 0;\r\n    console.log(\"===================================================\");\r\n    for(let ligneTotal = 0; ligneTotal < 9; ligneTotal++){\r\n        if( ligneTotal > 2 && ligneTotal < 6){ i=3; }\r\n        else if( ligneTotal > 5 ){ i=6; }\r\n        console.log( grille1[0+i][ligneTotal-i] + \" | \" + grille1[1+i][ligneTotal-i] + \" | \" + grille1[2+i][ligneTotal-i] + \"    ||   \" \r\n        + grille2[0+i][ligneTotal-i] + \" | \" + grille2[1+i][ligneTotal-i] + \" | \" + grille2[2+i][ligneTotal-i] );\r\n        if( ligneTotal === 2 || ligneTotal === 5 ){ console.log(\"\"); }\r\n    }\r\n    console.log(\"===================================================\");\r\n}*/\r\n\r\nfunction afficheGrille(grille){\r\n    let i = 0;\r\n    console.log(\"===================================================\");\r\n    for(let ligneTotal = 0; ligneTotal < 9; ligneTotal++){\r\n        if( ligneTotal > 2 && ligneTotal < 6){ i=3; }\r\n        else if( ligneTotal > 5 ){ i=6; }\r\n        console.log( grille[0+i][ligneTotal-i] + \" | \" + grille[1+i][ligneTotal-i] + \" | \" + grille[2+i][ligneTotal-i]);\r\n        if( ligneTotal === 2 || ligneTotal === 5 ){ console.log(\"\"); }\r\n    }\r\n    console.log(\"===================================================\");\r\n}\r\n\r\nconst TableauSudokuVide = (valeur) => {\r\n    let sudoVide = [ [], [], [], [], [], [], [], [], [] ];\r\n    for(let nBloc = 0; nBloc < 9; nBloc++){ \r\n        for(let nligne = 0; nligne < 3; nligne++){\r\n            sudoVide[nBloc].push([]);\r\n            for(let nColonne = 0; nColonne < 3; nColonne++){ sudoVide[nBloc][nligne].push(valeur); }\r\n        }\r\n    }\r\n    return sudoVide;\r\n} \r\n\r\nconst copieTableauSudo = ( grille ) => {\r\n    let tab = TableauSudokuVide(\" \");\r\n    for(let numBloc = 0; numBloc < 9; numBloc++){\r\n        for(let numLigne = 0; numLigne < 3; numLigne++){\r\n            for(let numColonne = 0; numColonne < 3; numColonne++){ tab[numBloc][numLigne][numColonne] = grille[numBloc][numLigne][numColonne] }\r\n        }\r\n    }\r\n    return tab;\r\n}\r\n\r\n// Fonction qui genere un chiffre aleatoire entier \r\nconst chiffreAleatoire = (valMin, valMax) => {\r\n    return Math.floor(Math.random() * (valMax + 1 - valMin) + valMin);\r\n}\r\n\r\n// Fonction pemetant de verifier si le chiffre est dans le mini bloc\r\nconst inBloc = (chiffre, block) => {\r\n    let validation = true;\r\n    let indice = 0;\r\n    while(indice < 3 && validation){\r\n        if(block[indice].indexOf(chiffre) !== -1){ validation = false; }\r\n        indice++\r\n    }\r\n    return validation;\r\n}\r\n\r\n// Fonction permetand de verifier que le chiffre n'est pas deja dans le bloc, ligne ou colonne\r\nconst valideChiffre = (chiffre, block, ligne, colonne) => {\r\n    let validation = true;\r\n    if( !inBloc(chiffre, block) || ligne.indexOf(chiffre) !== -1 || colonne.indexOf(chiffre) !== -1 ){ validation = false; }\r\n    return validation;\r\n}\r\n\r\n// Fonction permetant de retourner un tableau avec les chiffres que peut contenir la celulle\r\nconst chiffresPossible = (block, ligne, colonne) => {\r\n    let tabChiffres = [1,2,3,4,5,6,7,8,9];\r\n    let possible = [];\r\n    for(let i=0; i<tabChiffres.length;i++){\r\n        if( valideChiffre(tabChiffres[i], block, ligne, colonne) ){ possible.push(tabChiffres[i]) }\r\n    }\r\n    return possible;\r\n}\r\n\r\n// fonction permetant de recupérer tout la colonne de grille ou est situer la celule\r\nconst tableauColonne = (numBloc, numColonne, bloc) => {\r\n    let colonne = [];\r\n    let indice = null;\r\n\r\n    if( [0,3,6].indexOf(numBloc) !== -1 ){ indice = 0; }\r\n    else if( [1,4,7].indexOf(numBloc) !== -1 ){ indice = 1; }\r\n    else if( [2,5,8].indexOf(numBloc) !== -1 ){ indice = 2; }    \r\n\r\n    if(typeof indice === \"number\"){ for(let i = 0; i<7; i+=3){ bloc[i+indice].map( ligne => ( colonne.push(ligne[numColonne] ) )); } }\r\n    else{ console.log(\"erreur\"); }\r\n\r\n    return colonne;\r\n}\r\n\r\n// fonction permetant de recupérer tout la ligne de grille ou est situer la celule\r\nconst tableauLigne = (numBloc, numLigne, bloc) => {\r\n    let ligne = [];\r\n    let indice = null;\r\n\r\n    if( [0,1,2].indexOf(numBloc) !== -1 ){ indice = 0; }\r\n    else if( [3,4,5].indexOf(numBloc) !== -1 ){ indice = 3; }\r\n    else if( [6,7,8].indexOf(numBloc) !== -1 ){ indice = 6; }\r\n\r\n    if(typeof indice === \"number\"){ for(let i = 0; i<3; i++){ bloc[i+indice][numLigne].map( item => ( ligne.push(item) )); } }\r\n    else{ console.log(\"erreur\"); }\r\n\r\n    return ligne;\r\n}\r\n\r\nconst sudokuChiffreAleatoir = (nbChiffre) => {\r\n    let tableauSudoku = TableauSudokuVide(\" \");\r\n    let numBloc = 0, numColonne = 0, numLigne = 0, chiffre = 0;\r\n    let ligne = null, colonne = null;\r\n    let indice = 0;\r\n    while(indice < nbChiffre){\r\n        chiffre = chiffreAleatoire(1,9);\r\n        numBloc = chiffreAleatoire(0,8);\r\n        numColonne = chiffreAleatoire(0,2); \r\n        numLigne = chiffreAleatoire(0,2);\r\n        if(  tableauSudoku[numBloc][numLigne][numColonne] === \" \"){\r\n            ligne = tableauLigne(numBloc, numLigne, tableauSudoku);\r\n            colonne = tableauColonne(numBloc, numColonne, tableauSudoku);\r\n            if( valideChiffre(chiffre, tableauSudoku[numBloc], ligne, colonne) ){\r\n                tableauSudoku[numBloc][numLigne][numColonne] = chiffre;\r\n                indice ++;\r\n            }\r\n        }\r\n    }\r\n    return tableauSudoku;\r\n}\r\n\r\nfunction resolutionSolutionUnique( grille, chemin, posibility, trouver ){\r\n    let ligne = null, colonne = null;\r\n    let chiffreDispo = null;\r\n    let changement = false;\r\n    let gagner = true;\r\n\r\n    for(let numBloc = 0; numBloc < 9; numBloc++){\r\n        for(let numLigne = 0; numLigne < 3; numLigne++){\r\n            for(let numColonne = 0; numColonne < 3; numColonne++){\r\n                if( grille[numBloc][numLigne][numColonne] === \" \" ){\r\n                    ligne = tableauLigne(numBloc, numLigne, grille);\r\n                    colonne = tableauColonne(numBloc, numColonne, grille);\r\n                    chiffreDispo = chiffresPossible(grille[numBloc], ligne, colonne);\r\n                    if(chiffreDispo.length === 1){ \r\n                        if( chemin.length > 0 ){ chemin[chemin.length-1].push( [numBloc, numLigne, numColonne] ); }\r\n                        grille[numBloc][numLigne][numColonne] = chiffreDispo[0]; \r\n                        changement = true;\r\n                    }\r\n                    else if( chiffreDispo.length > 1 && !changement ){ posibility.push( [ chiffreDispo, [numBloc, numLigne, numColonne] ]); }\r\n                    if(grille[numBloc][numLigne][numColonne] === \" \"){ gagner = false; }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(gagner){ trouver.push(\"bonjour\"); }\r\n    return changement;\r\n}\r\n\r\n\r\nfunction trierParTaille( posibility ){\r\n    let tab = [];\r\n    let tabTrie = [];\r\n    for(let i = 0; i<10; i++){ tab.push([]); }\r\n    for(let i = 0; i<posibility.length; i++){ tab[posibility[i][0].length - 1].push(posibility[i]); }\r\n    for(let i = 0; i<tab.length; i++){\r\n        for(let j=0; j<tab[i].length; j++){\r\n            if(tab[i][j].length > 0){ tabTrie.push(tab[i][j]); }\r\n        }\r\n    }\r\n    return tabTrie;\r\n}\r\n\r\nfunction verificationGagner(grille){\r\n    let ligne = null, colonne = null;\r\n    let validation = true;\r\n    let chiffre = null;\r\n\r\n\r\n    for(let numBloc = 0; numBloc < 9 && validation; numBloc++){\r\n        for(let numLigne = 0; numLigne < 3 && validation; numLigne++){\r\n            for(let numColonne = 0; numColonne < 3 && validation; numColonne++){\r\n                if(grille[numBloc][numLigne][numColonne] === \" \"){ validation = false; }\r\n                else{\r\n                    chiffre = grille[numBloc][numLigne][numColonne];\r\n                    grille[numBloc][numLigne][numColonne] = \" \";\r\n                    ligne = tableauLigne(numBloc, numLigne, grille);\r\n                    colonne = tableauColonne(numBloc, numColonne, grille);\r\n                    if( !valideChiffre(chiffre, grille[numBloc], ligne, colonne) ){ validation = false; }\r\n                    grille[numBloc][numLigne][numColonne] = chiffre;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(!validation){ validation = undefined; }\r\n    return validation;\r\n}\r\n\r\n// Fonction permetant de suprimer les cellules de la grille present dans le chemin\r\nfunction removeValue(newBloc, chemin){\r\n    for(let i = 1; i<chemin.length; i++){\r\n        newBloc[chemin[i][0]][chemin[i][1]][chemin[i][2]] = \" \";\r\n    }\r\n}\r\n\r\n\r\nfunction actuChemin(grille, chemin, posibility, choix){\r\n    let infoBloc = null;\r\n    if(choix){ \r\n        posibility = trierParTaille(posibility); \r\n        chemin.push( posibility[0] );\r\n    }\r\n    infoBloc = chemin[chemin.length-1][1];\r\n    grille[infoBloc[0]][infoBloc[1]][infoBloc[2]] = chemin[chemin.length-1][0][0];\r\n}\r\n\r\nfunction presTretement(grille, chemin, posibility, trouver){\r\n    let outBoucle = false;\r\n    let changement = true;\r\n    while(changement){ \r\n        posibility = [];\r\n        changement = resolutionSolutionUnique(grille, chemin, posibility, trouver);\r\n    }\r\n    if(trouver.length > 0){ outBoucle = true; }\r\n    else if(posibility.length > 0){ actuChemin(grille, chemin, posibility, true); }\r\n\r\n    return outBoucle;\r\n}\r\n\r\nfunction resolutionTotal( grille ){\r\n    let chemin = [], posibility = [];\r\n    let outBoucle = false;\r\n    let flag = true;\r\n    let gagner = false;\r\n    let trouver = [];\r\n\r\n    outBoucle = presTretement(grille, chemin, posibility, trouver);\r\n\r\n    while(!outBoucle){\r\n        outBoucle = presTretement(grille, chemin, posibility, trouver);\r\n        if( posibility.length === 0 && chemin.length > 0 && trouver.length === 0){\r\n            if(chemin[chemin.length -1][0].length > 0){\r\n                flag = true;\r\n                let n = chemin.length;\r\n                for(let i=0; i<n && flag; i++){\r\n                    if(chemin.length > 0){\r\n                        removeValue(grille, chemin[chemin.length-1]);\r\n                        if(chemin[chemin.length-1][0].length > 1){\r\n                            flag = false;\r\n                            chemin[chemin.length -1] = [chemin[chemin.length-1][0], chemin[chemin.length-1][1]];\r\n                            chemin[chemin.length -1][0].shift();\r\n                        }\r\n                        else{ chemin.pop(); }\r\n                    }\r\n                    else{ \r\n                        flag = false; \r\n                        outBoucle = true;\r\n                    }\r\n                }\r\n                if(chemin.length > 0){ actuChemin(grille, chemin, posibility, false); }\r\n                else{ outBoucle = true; }\r\n            }\r\n        }\r\n        else{ outBoucle = true; }\r\n    }\r\n    if(trouver.length > 0){ gagner = true; }\r\n    return gagner;\r\n}\r\n\r\n\r\nfunction genereChiffreCacher(newGrille, cacher){\r\n    let numBloc = 0, numColonne = 0, numLigne = 0;\r\n    let indice = 0;\r\n    while(indice < cacher){\r\n        numBloc = chiffreAleatoire(0,8);\r\n        numColonne = chiffreAleatoire(0,2); \r\n        numLigne = chiffreAleatoire(0,2);\r\n        if(  newGrille[numBloc][numLigne][numColonne] !== \" \"){\r\n            newGrille[numBloc][numLigne][numColonne] = \" \";\r\n            indice ++;\r\n        }\r\n    }\r\n    return newGrille;\r\n}\r\n\r\nfunction posibility(grille, infoBloc){\r\n    let ligne = tableauLigne(infoBloc[0], infoBloc[1], grille);\r\n    let colonne = tableauColonne(infoBloc[0], infoBloc[2], grille);\r\n    return chiffresPossible(grille[infoBloc[0]], ligne, colonne);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nvar sudo = sudokuChiffreAleatoir(15);\r\n\r\nvar sudo1 = copieTableauSudo(sudo);\r\n\r\n\r\nresolutionTotal(sudo1);\r\n\r\nafficheDeuxGrille(sudo, sudo1);*/\r\n\r\nexport { posibility ,genereChiffreCacher,sudokuChiffreAleatoir, copieTableauSudo, resolutionTotal, verificationGagner, TableauSudokuVide, afficheGrille };","import React from 'react';\r\n\r\n\r\nconst ChiffrePosible = ({posibility, onClickClavierNum}) => {\r\n    let indice = 0;\r\n    return(\r\n        <div className=\"clavier\">\r\n            {posibility.map(item => (\r\n                <button key={indice++} id={item} onClick={onClickClavierNum}> {item} </button>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ChiffrePosible;","function styleBloc(grille){\r\n    let style = {};\r\n\r\n    for(let numB = 0; numB < 9; numB++){\r\n        for(let numL=0; numL < 3; numL++){\r\n            for(let numC =0; numC < 3; numC++){\r\n                if(grille[numB][numL][numC] === \" \"){\r\n                    style[\"case\"+numB+\"\"+numL+\"\"+numC] = {\r\n                        backgroundColor : \"white\",\r\n                        border : \"1px solid black\",\r\n                        fontWeight : \"normal\",\r\n                        color : \"black\"\r\n                    };\r\n                }\r\n                else{\r\n                    style[\"case\"+numB+\"\"+numL+\"\"+numC] = {\r\n                        backgroundColor : \"white\",\r\n                        border : \"1px solid black\",\r\n                        fontWeight : \"bold\",\r\n                        color : \"black\"\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return style;\r\n}\r\n\r\nfunction copieObjet(tab){\r\n    let style = {};\r\n    for(let numB = 0; numB < 9; numB++){\r\n        for(let numL=0; numL < 3; numL++){\r\n            for(let numC =0; numC < 3; numC++){ style[\"case\"+numB+\"\"+numL+\"\"+numC] = tab[\"case\"+numB+\"\"+numL+\"\"+numC]; }\r\n        }\r\n    }\r\n    return style;\r\n}\r\n\r\n\r\nexport {copieObjet, styleBloc};","import React from 'react';\r\nimport Grille from './grille';\r\nimport SudoBoutton from './sudoBoutton';\r\nimport Option from './option';\r\nimport {sudokuChiffreAleatoir, copieTableauSudo, resolutionTotal, posibility} from './fonction';\r\nimport {verificationGagner, genereChiffreCacher} from './fonction';\r\nimport ChiffrePosible from './chiffrePosible';\r\nimport {colorCase, colorVisio, colorChiffreSelect, randomChiffre } from './variable';\r\nimport {copieObjet, styleBloc} from './cssFonction';\r\n\r\n\r\nclass Sudoku extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            maGrille : this.props.newGrille,//sudokuChiffreAleatoir(randomChiffre),\r\n            cssBloc : this.props.cssBloc,//styleBloc(sudokuChiffreAleatoir(randomChiffre)),\r\n            posibility : [1,2,3,4,5,6,7,8,9],\r\n            win : undefined,\r\n            caseActu : null\r\n        };\r\n        this.solution = this.props.solution;\r\n        this.colorLigneColonne = [];\r\n        this.colorChiffre = [];\r\n        this.action = [];\r\n        this.modeRepere = false;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"Sudoku\">\r\n                <h1> Sudoku !!! </h1>\r\n                <div className=\"ecran\">\r\n                    <Grille\r\n                        grille={this.state.maGrille}\r\n                        onChangeChiffre={this.onChangeChiffre}\r\n                        cssBloc={this.state.cssBloc}\r\n                        onClickCelle={this.onClickCelle}\r\n                    />\r\n                    <Option\r\n                        onClickRecommencer={this.onClickRecommencer}\r\n                        onClickRetour={this.onClickRetour}\r\n                        onChangeRepere={this.onChangeRepere}\r\n                    />\r\n                </div>\r\n                <ChiffrePosible \r\n                    posibility={this.state.posibility} \r\n                    onClickClavierNum={this.onClickClavierNum} \r\n                />\r\n                <SudoBoutton\r\n                    onClickNouvellePartie={this.onClickNouvellePartie}\r\n                    onClickResoudre={this.onClickResoudre}\r\n                    onClickMenu={this.props.onClickMenu}\r\n                />\r\n                {this.state.win && <h2 className=\"Win\"> You Win </h2>}\r\n                {this.state.win === false && <h2 className=\"Lose\"> You Lose </h2>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n//=====================================================================\r\n//===================   Fonction gestion CSS  =========================\r\n//=====================================================================\r\n\r\n    modifCSS(celle, style, couleurFond, gras, bordure, couleurText){\r\n        let backgroundColor = style[celle].backgroundColor;\r\n        let fontWeight = style[celle].fontWeight;\r\n        let border = style[celle].border;\r\n        let color = style[celle].color;\r\n\r\n        if(typeof couleurFond === \"string\"){ backgroundColor = couleurFond; }\r\n        if(typeof gras === \"string\"){ fontWeight = gras; }\r\n        if(typeof bordure === \"string\"){ border = bordure; }\r\n        if(typeof couleurText === \"string\"){ color = couleurText; }\r\n\r\n        style[celle] = {\r\n            backgroundColor : backgroundColor,\r\n            fontWeight : fontWeight,\r\n            border : border,\r\n            color : color\r\n        }; \r\n    } \r\n\r\n//=======================================================================\r\n\r\n\r\n//=====================================================================\r\n//=================== gestion CSS Mode Vision =========================\r\n//=====================================================================\r\n\r\n    // Partie récupération des cases à afficher pour le mode vision\r\n    visioLigne= (infoBloc) => {\r\n        let indice = 0;\r\n\r\n        if( [3,4,5].indexOf(infoBloc[0]) !== -1 ){ indice = 3; }\r\n        else if( [6,7,8].indexOf(infoBloc[0]) !== -1 ){ indice = 6; }\r\n\r\n        for(let numBloc=0; numBloc<3; numBloc++){\r\n            for(let numColonne = 0; numColonne<3; numColonne++){ this.colorLigneColonne.push(\"case\"+(numBloc+indice)+\"\"+infoBloc[1]+\"\"+numColonne); }\r\n        }\r\n    }\r\n\r\n    visioColonne = (infoBloc) => {\r\n        let indice = 0;\r\n\r\n        if( [1,4,7].indexOf(infoBloc[0]) !== -1 ){ indice = 1; }\r\n        else if( [2,5,8].indexOf(infoBloc[0]) !== -1 ){ indice = 2; } \r\n        for(let numBloc=0; numBloc<7; numBloc+=3){\r\n            for(let numLigne = 0; numLigne<3; numLigne++){ this.colorLigneColonne.push(\"case\"+(numBloc+indice)+\"\"+numLigne+\"\"+infoBloc[2]); }\r\n        }\r\n    }\r\n\r\n    visioChiffre = (chiffre) => {\r\n        this.colorChiffre = [];\r\n        for(let numBloc = 0; numBloc < 9; numBloc++){\r\n            for(let numLigne = 0; numLigne < 3; numLigne++){\r\n                for(let numColonne = 0; numColonne < 3; numColonne++){ \r\n                    if(this.state.maGrille[numBloc][numLigne][numColonne] === chiffre){ this.colorChiffre.push(\"case\"+numBloc+\"\"+numLigne+\"\"+numColonne); } \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Enlever l'affichage du mode vision précedent \r\n    resetVisio = (style) => {\r\n        if(this.colorLigneColonne.length > 0){\r\n            for(let i=0; i<this.colorLigneColonne.length; i++){ \r\n                if(style[this.colorLigneColonne[i]].backgroundColor !== colorCase){ this.modifCSS(this.colorLigneColonne[i], style, \"white\", null, null, null); }\r\n            }\r\n            this.colorLigneColonne = [];\r\n        }\r\n\r\n        if(this.colorChiffre.length > 0){ \r\n            for(let i=0; i<this.colorChiffre.length; i++){ \r\n                if(style[this.colorChiffre[i]].backgroundColor !== colorCase){ this.modifCSS(this.colorChiffre[i], style, \"white\", null, null, null); }\r\n            }\r\n            this.colorChiffre = [];\r\n        }\r\n    }\r\n\r\n    // Activer l'affichage du mode vision \r\n    onVisio = (style) => {\r\n        if(this.colorLigneColonne.length > 0){\r\n            for(let i=0; i<this.colorLigneColonne.length; i++){ \r\n                if(style[this.colorLigneColonne[i]].backgroundColor !=colorCase){ this.modifCSS(this.colorLigneColonne[i], style, colorVisio, null, null, null); }\r\n            }\r\n        }\r\n\r\n        if(this.colorChiffre.length > 0){ \r\n            for(let i=0; i<this.colorChiffre.length; i++){ \r\n                if(style[this.colorChiffre[i]].backgroundColor !=colorCase){ this.modifCSS(this.colorChiffre[i], style, colorChiffreSelect, null, null, null); }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Action à réaliser pour le mode vision\r\n    modeVisio = (infoBloc, chiffre, style) => {\r\n        this.resetVisio(style);\r\n        this.visioColonne(infoBloc);\r\n        this.visioLigne(infoBloc);\r\n        if(typeof chiffre === \"number\"){ this.visioChiffre(chiffre); }\r\n        this.onVisio(style);\r\n    }\r\n\r\n//=====================================================================\r\n\r\n\r\n//=====================================================================\r\n//================ gestion CSS pour la case selectionner ==============\r\n//=====================================================================\r\n\r\n    selectCaseColor = (style, celle) => {\r\n        if(this.state.caseActu !== null){ this.modifCSS(this.state.caseActu, style, \"white\", null, \"black solid 1px\", null); }\r\n        this.modifCSS(celle, style, colorCase, null, \" solid 1px\", null);\r\n    }\r\n\r\n//======================================================================\r\n\r\n\r\n//===========================================================================\r\n//================ gestion CSS pour le mode repère ==========================\r\n//===========================================================================\r\n\r\n    colorRepere(style){\r\n        if(this.modeRepere){ this.modifCSS(this.state.caseActu, style, null, null, null, \"blue\"); }\r\n        else if(style[this.state.caseActu].color === \"blue\"){ this.modifCSS(this.state.caseActu, style, null, null, null, \"black\"); }\r\n    }\r\n\r\n//===========================================================================\r\n\r\n\r\n//===========================================================================\r\n//================ gestion CSS pour la correction de la grille ==============\r\n//===========================================================================\r\n\r\n    colorCorrection = (style) => {\r\n        for(let numBloc = 0; numBloc < 9; numBloc++){\r\n            for(let numLigne = 0; numLigne < 3; numLigne++){\r\n                for(let numColonne = 0; numColonne < 3; numColonne++){\r\n                    let celle = \"case\"+numBloc+\"\"+numLigne+\"\"+numColonne;\r\n                    if(style[celle].fontWeight !== \"bold\"){\r\n                        if(this.state.maGrille[numBloc][numLigne][numColonne] === \" \"){ this.modifCSS(celle, style, \"white\", \"bold\", \"black solid 1px\", \"orange\"); }\r\n                        else if(this.state.maGrille[numBloc][numLigne][numColonne] === this.solution[numBloc][numLigne][numColonne]){ this.modifCSS(celle, style, \"white\", \"bold\", \"black solid 1px\", \"green\"); }\r\n                        else{ this.modifCSS(celle, style, \"white\", \"bold\", \"black solid 1px\", \"red\"); }\r\n                    }\r\n                    else{ this.modifCSS(celle, style, \"white\", null, \"black solid 1px\", null); }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n//============================================================================\r\n\r\n\r\n//===========================================================================\r\n//================ Fonction utile pour notre Jeu ============================\r\n//===========================================================================\r\n\r\n    // Fonction pour générer une nouvelle grille de Sudoku\r\n    nouvellePartie = (nbChiffreCacher) => {\r\n        let grille = sudokuChiffreAleatoir(randomChiffre);\r\n        while(!resolutionTotal(grille)){ grille = sudokuChiffreAleatoir(randomChiffre); }\r\n        this.solution = copieTableauSudo(grille);\r\n        genereChiffreCacher(grille, nbChiffreCacher);\r\n        return grille;\r\n    }\r\n\r\n    // Fonction permettant d'enregistré chaque action utile fait\r\n    actuAction = (infoBloc) => {\r\n        if(this.action.indexOf(infoBloc[0]+\"\"+infoBloc[1]+\"\"+infoBloc[2]) === -1){ this.action.push(infoBloc[0]+\"\"+infoBloc[1]+\"\"+infoBloc[2]); }\r\n        else{\r\n            this.action.splice(this.action.indexOf(infoBloc[0]+\"\"+infoBloc[1]+\"\"+infoBloc[2]), 1);\r\n            this.action.push(infoBloc[0]+\"\"+infoBloc[1]+\"\"+infoBloc[2]);\r\n        }\r\n    }\r\n\r\n//============================================================================\r\n\r\n//===========================================================================\r\n//================ Evenement onClick pour la partie en cours ================\r\n//===========================================================================\r\n\r\n    // Evenement lors de la selection de la case\r\n    onClickCelle = (event) => {\r\n        let celle = event.target.className;\r\n        let infoBloc = [parseInt(celle[4]), parseInt(celle[5]), parseInt(celle[6])];\r\n        let chiffre = this.state.maGrille[infoBloc[0]][infoBloc[1]][infoBloc[2]];\r\n        let style = copieObjet(this.state.cssBloc);\r\n        this.selectCaseColor(style, celle);\r\n\r\n        if(this.props.vision === \"yes\"){\r\n            let chiffrePossible = posibility(this.state.maGrille, infoBloc);\r\n            this.modeVisio(infoBloc, chiffre, style);\r\n            this.setState({\r\n                cssBloc : style,\r\n                caseActu : celle,\r\n                posibility : chiffrePossible\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                cssBloc : style,\r\n                caseActu : celle\r\n            });\r\n        }\r\n    }\r\n\r\n    // Evenement lors de la selection du chiffre choisie sur le clavier numérique\r\n    onClickClavierNum = (event) => {\r\n        if(this.state.caseActu !== null && this.state.win === undefined && this.state.cssBloc[this.state.caseActu].fontWeight !== \"bold\"){\r\n            let grille = copieTableauSudo(this.state.maGrille);\r\n            let chiffre = parseInt(event.target.id);\r\n            let infoBloc = [parseInt(this.state.caseActu[4]), parseInt(this.state.caseActu[5]), parseInt(this.state.caseActu[6])];\r\n            let style = copieObjet(this.state.cssBloc);\r\n            \r\n            grille[infoBloc[0]][infoBloc[1]][infoBloc[2]] = chiffre;\r\n            let gagner = verificationGagner(grille);\r\n            this.actuAction(infoBloc);\r\n            this.colorRepere(style, this.state.caseActu);\r\n            this.setState({\r\n                maGrille: grille,\r\n                cssBloc: style,\r\n                win : gagner,\r\n            });\r\n        }\r\n    }\r\n\r\n//==============================================================================\r\n\r\n\r\n//===========================================================================\r\n//================ Evenement clavier (keyboard) =============================\r\n//===========================================================================\r\n\r\n    clavierTouch = (event) => {\r\n        if(this.state.caseActu !== null && this.state.cssBloc[this.state.caseActu].fontWeight !== \"bold\" && this.state.win === undefined){\r\n            let chiffre = parseInt(event.key);\r\n            let infoBloc = [parseInt(this.state.caseActu[4]), parseInt(this.state.caseActu[5]), parseInt(this.state.caseActu[6])];\r\n            if( !isNaN(chiffre) || event.key === \"Backspace\" ){\r\n                if(event.key === \"Backspace\"){\r\n                    let grille = copieTableauSudo(this.state.maGrille);\r\n                    grille[infoBloc[0]][infoBloc[1]][infoBloc[2]] = \" \";\r\n                    this.action.splice(this.action.indexOf(infoBloc[0]+\"\"+infoBloc[1]+\"\"+infoBloc[2]), 1);\r\n                    this.setState({ maGrille : grille })\r\n                }\r\n\r\n                else if(this.props.vision === \"yes\"){\r\n                    let chiffrePossible = posibility(this.state.maGrille, infoBloc);\r\n                    if( chiffrePossible.indexOf(chiffre) !== -1 ){\r\n                        let grille = copieTableauSudo(this.state.maGrille);\r\n                        grille[infoBloc[0]][infoBloc[1]][infoBloc[2]] = chiffre;\r\n                        let gagner = verificationGagner(grille);\r\n                        this.actuAction(grille);\r\n                        let style = copieObjet(this.state.cssBloc);\r\n                        this.colorRepere(style, this.state.caseActu);\r\n                        this.setState({ \r\n                            maGrille : grille,\r\n                            cssBloc : style,\r\n                            win : gagner\r\n                        });\r\n                    }\r\n                }\r\n                else if (chiffre !== 0) {\r\n                    let grille = copieTableauSudo(this.state.maGrille);\r\n                    grille[infoBloc[0]][infoBloc[1]][infoBloc[2]] = chiffre;\r\n                    let gagner = verificationGagner(grille);\r\n                    this.actuAction(grille);\r\n                    let style = copieObjet(this.state.cssBloc);\r\n                    this.colorRepere(style, this.state.caseActu);\r\n                    this.setState({\r\n                        maGrille: grille,\r\n                        cssBloc: style,\r\n                        win : gagner\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n//==============================================================================\r\n\r\n\r\n//===========================================================================\r\n//================ Gesttion Boutton Reset et Recommencer =====================\r\n//===========================================================================\r\n\r\n    // Boutton recommencer pour remettre à zéro la grille\r\n    onClickRecommencer = () => {\r\n        if(this.action.length > 0 && this.state.win === undefined){\r\n            let grille = copieTableauSudo(this.state.maGrille);\r\n            for(let i=0; i<this.action.length; i++){\r\n                let infoBloc = this.action[i];\r\n                infoBloc = [parseInt(infoBloc[0]), parseInt(infoBloc[1]), parseInt(infoBloc[2])];\r\n                grille[infoBloc[0]][infoBloc[1]][infoBloc[2]] = \" \";\r\n            }\r\n            this.action = [];\r\n            this.setState({maGrille : grille });\r\n        }\r\n    }\r\n\r\n    // Boutton Retour\r\n    onClickRetour = () => {\r\n        if(this.action.length > 0 && this.state.win === undefined){\r\n            let style = copieObjet(this.state.cssBloc);\r\n            let grille = copieTableauSudo(this.state.maGrille);\r\n            let infoBloc = this.action[this.action.length-1];\r\n            infoBloc = [parseInt(infoBloc[0]), parseInt(infoBloc[1]), parseInt(infoBloc[2])];\r\n            console.log(infoBloc);\r\n            this.selectCaseColor(style ,\"case\"+infoBloc[0]+\"\"+infoBloc[1]+\"\"+infoBloc[2]);\r\n            grille[infoBloc[0]][infoBloc[1]][infoBloc[2]] = \" \";\r\n            this.action.pop();\r\n            this.setState({ \r\n                maGrille : grille,\r\n                caseActu : \"case\"+infoBloc[0]+\"\"+infoBloc[1]+\"\"+infoBloc[2],\r\n                cssBloc : style\r\n            });\r\n        }\r\n    }\r\n\r\n//==============================================================================\r\n\r\n\r\n//===========================================================================\r\n//================ Evenement onChange du checkbox mode repere ===============\r\n//===========================================================================\r\n\r\n    onChangeRepere = (event) => { this.modeRepere = event.target.checked; }\r\n\r\n//==============================================================================\r\n\r\n\r\n//===========================================================================\r\n//================ Boutton Nouvelle Partie et Résoudre ======================\r\n//===========================================================================\r\n\r\n    // Boutton Resoudre pour afficher la solution\r\n    onClickResoudre = () => { \r\n        if(this.state.win === undefined){\r\n            let style = copieObjet(this.state.cssBloc);\r\n            this.colorCorrection(style);\r\n            this.setState({\r\n                maGrille : this.solution,\r\n                cssBloc : style,\r\n                win : false\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    // Boutton Nouvelle partie pour génerer une nouvelle grille\r\n    onClickNouvellePartie = () => {\r\n        let grille = this.nouvellePartie(this.props.niveau); \r\n        let style = styleBloc(grille);\r\n        this.action = [];\r\n        this.setState({\r\n            maGrille : grille,\r\n            cssBloc : style,\r\n            win : undefined,\r\n            caseActu : null\r\n        });\r\n    }\r\n\r\n//==============================================================================\r\n    componentDidMount(){\r\n        // Ajouter l'API pour le clavier\r\n        document.addEventListener('keydown', this.clavierTouch);\r\n    }\r\n}\r\n\r\n\r\nexport default Sudoku;","import React from \"react\";\r\nimport Menu from './menu';\r\nimport Sudoku from './sudoku';\r\nimport {genereChiffreCacher ,afficheGrille, sudokuChiffreAleatoir} from './fonction';\r\nimport {resolutionTotal ,copieTableauSudo} from './fonction';\r\nimport {styleBloc} from './cssFonction';\r\nimport {easy, randomChiffre} from './variable';\r\n\r\nclass MonJeu extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            actuWindo : \"Menu\",\r\n            niveau : easy,\r\n            vision : \"yes\",\r\n            start : false\r\n        }\r\n        this.newGrille = null;//sudokuChiffreAleatoir(20);\r\n        this.solution = null;//sudokuChiffreAleatoir(20);\r\n        this.cssBloc = null;//styleBloc(this.newGrille);\r\n    }\r\n\r\n    render(){\r\n        //afficheGrille(this.newGrille);\r\n        return(\r\n            <div id=\"Jeu\">\r\n                {this.state.actuWindo === \"Menu\" && \r\n                    <Menu \r\n                        onChangeNiveau={this.onChangeNiveau} \r\n                        onChangeVision={this.onChangeVision}\r\n                        onClickJouer={this.onClickJouer}\r\n                    /> \r\n                }\r\n                {this.state.actuWindo === \"jeu\" &&\r\n                    <Sudoku \r\n                        niveau={this.state.niveau} \r\n                        cssBloc={this.cssBloc}\r\n                        vision={this.state.vision}\r\n                        newGrille={this.newGrille}\r\n                        solution={this.solution}\r\n                        onClickMenu={this.onClickMenu}\r\n                    /> \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    nouvellePartie = (nbChiffreCacher) => {\r\n        this.newGrille = sudokuChiffreAleatoir(randomChiffre);\r\n        while(!resolutionTotal(this.newGrille)){ this.newGrille = sudokuChiffreAleatoir(randomChiffre); }\r\n        this.solution = copieTableauSudo(this.newGrille);\r\n        genereChiffreCacher(this.newGrille, nbChiffreCacher);\r\n        this.cssBloc = styleBloc(this.newGrille);\r\n    }\r\n\r\n    onChangeNiveau = (event) => { this.setState({ niveau : event.target.value }); }\r\n\r\n    onChangeVision = (event) => { this.setState({ vision : event.target.value }); }\r\n\r\n    onClickJouer = () => { \r\n        this.nouvellePartie(this.state.niveau);\r\n        this.setState({ actuWindo : \"jeu\" }); \r\n    }\r\n\r\n    onClickMenu = () => { \r\n        this.setState({ \r\n            actuWindo : \"Menu\",\r\n            niveau : easy,\r\n            vision : \"yes\"\r\n        }); \r\n    }\r\n}\r\n\r\n\r\nexport default MonJeu;","import React from 'react';\nimport MonJeu from './elements/monJeu';\n//import MonJeu from './element/monJeu';\nimport './App.css';\n\nfunction App() {\n  return (\n    <MonJeu />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}